import { FC, useContext, useEffect, useRef, useState } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import qs from "qs";

import Categories from "../components/Categories";
import SortPopup, { list } from "../components/Sort";
import MyLoader from "../components/UI/MyLoader";
import PizzaBlock from "../components/PizzaBlock";
import Pagination from "../components/UI/Pagination";
import FilterSlice, {
  selectFilter,
  setCategoryId,
  setCurrentPage,
  setFilters,
} from "../components/redux/slices/filterSlice";
import {
  fetchPizzas,
  selectPizzaData,
} from "../components/redux/slices/pizzaSlice";
import { useAppDispatch } from "../components/redux/store";
import {
  FetchPizzasArgs,
  IFilterSliceState,
  Sort,
} from "../components/redux/@types";

const Home: FC = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const isSearch = useRef(false);
  const isMounted = useRef(false);

  const { categoryId, sort, currentPage, searchValue } =
    useSelector(selectFilter);
  const { items, status } = useSelector(selectPizzaData);

  const getPizzas = async (): Promise<void> => {
    const category = categoryId ? `&category=${categoryId}` : "";
    const order = sort.sortProperty.includes("-") ? "asc" : "desc";
    const sortBy = sort.sortProperty.replace("-", "");
    /*
    –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ mokapi (–±—ç–∫–µ–Ω–¥–∞)
    –ù–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –±—ç–∫–µ–Ω–¥–µ –∏ –ø–æ–∏—Å–∫ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
     */
    const search = searchValue ? `&search=${searchValue}` : "";

    dispatch(
      fetchPizzas({
        category,
        order,
        sortBy,
        search,
        currentPage,
      })
    );

    window.scroll(0, 0);
  };

  // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º URL-–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–¥–∞–∫—Å–µ
  useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(
        window.location.search.substring(1)
      ) as unknown as FetchPizzasArgs;
      const sort = list.find((obj) => obj.sortProperty === params.sortBy);
      dispatch(
        setFilters({
          currentPage: params.currentPage,
          sort: sort || list[0],
          searchValue: params.search,
          categoryId: Number(params.category),
        })
      );
      isSearch.current = true;
    }
  }, []);

  //–ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–∏—Ü—Ü—ã
  useEffect(() => {
    getPizzas();
    // isSearch.current = false;
  }, [categoryId, sort, searchValue, currentPage]);

  //–ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–µ–¥–µ—Ä–µ –Ω–µ –≤—à–∏–≤–∞—Ç—å –≤ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∏–∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.
  //–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ
  useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        sortProperty: sort.sortProperty,
        currentPage,
        categoryId,
      });
      navigate(`?${queryString}`);
    }
    isMounted.current = true;
  }, [categoryId, sort, currentPage]);
  /*
  –í–∞—Ä–∏–∞–Ω—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ–º–æ–≤ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ. –ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –µ—Å–ª–∏ –∏–º–µ–µ–º –≤—Å–µ–≥–¥–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏ –º–∞–ª–æ –∏—Ç–µ–º–æ–≤.
  –ï—Å–ª–∏ –∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –Ω–µ –≤—Å–µ –∏—Ç–µ–º—ã, —Ç–æ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–µ–∫—ç–Ω–¥—É!!!!!
    const pizzas = items.filter((pizza) => {
       return pizza.title.toLowerCase().includes(searchValue.toLowerCase())
     })
     .map((pizza) => {
       return <PizzaBlock key={pizza.title} {...pizza} />;
     });
   */

  /*
  –í–∞—Ä–∏–∞–Ω—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ–º–æ–≤ –Ω–∞ –±—ç–∫—ç–Ω–¥–µ, –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∏—Ç–µ–º–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞.
  –û—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω, –µ—Å–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∏—Ç–µ–º—ã (—Å–∫—Ä—ã—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –Ω–∞–ø—Ä–∏–º–µ—Ä)
   */
  const pizzas = items.map((pizza: any) => {
    return <PizzaBlock key={pizza.title} {...pizza} />;
  });

  const loader = [...new Array(6)].map((_, index) => <MyLoader key={index} />);

  const onChangeCategory = (id: number) => {
    dispatch(setCategoryId(id));
  };

  return (
    <div className="container">
      <div className="content__top">
        <Categories category={categoryId} onChangeCategory={onChangeCategory} />
        <SortPopup />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      {status === "error" ? (
        <div className="content__error-info">
          <h2>
            –û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! <span>üòï</span>
          </h2>
          <p>
            –í–µ—Ä–æ—è—Ç–Ω–µ–π –≤—Å–µ–≥–æ, –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∏—Ü—Ü.
            <br /> –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
          </p>
        </div>
      ) : (
        <div className="content__items">
          {status === "loading" ? loader : pizzas}
        </div>
      )}
      <Pagination
        onChangePage={(number: number) => dispatch(setCurrentPage(number))}
      />
    </div>
  );
};

export default Home;
